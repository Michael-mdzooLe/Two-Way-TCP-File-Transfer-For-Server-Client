import socket
import threading
import os
import tkinter as tk
from tkinter import ttk

SERVER_HOST = '0.0.0.0'
SERVER_PORT = 5001
BUFFER_SIZE = 4096
SEPARATOR = "<SEPARATOR>"

def handle_client(client_socket, address, log_box):
    try:
        log_box.insert(tk.END, f"[+] Connection from {address}")
        command = client_socket.recv(BUFFER_SIZE).decode().strip()
        client_socket.send("ACK".encode())  # Confirm receipt of command

        if command == "UPLOAD":
            received = client_socket.recv(BUFFER_SIZE).decode()
            filename, filesize = received.split(SEPARATOR)
            filename = os.path.basename(filename)
            filesize = int(filesize)
            log_box.insert(tk.END, f"Receiving file: {filename} ({filesize} bytes)")

            with open(f"received_{filename}", "wb") as f:
                total = 0
                while total < filesize:
                    bytes_read = client_socket.recv(BUFFER_SIZE)
                    if not bytes_read:
                        break
                    f.write(bytes_read)
                    total += len(bytes_read)

            log_box.insert(tk.END, f"[✓] File received: {filename} ({total} bytes)")

        elif command == "DOWNLOAD":
            filename = client_socket.recv(BUFFER_SIZE).decode()
            if not os.path.exists(f"received_{filename}"):
                client_socket.send("NOTFOUND".encode())
                log_box.insert(tk.END, f"[✗] Download request failed: {filename} not found")
                return

            filepath = f"received_{filename}"
            filesize = os.path.getsize(filepath)
            client_socket.send(f"{filename}{SEPARATOR}{filesize}".encode())

            with open(filepath, "rb") as f:
                while True:
                    bytes_read = f.read(BUFFER_SIZE)
                    if not bytes_read:
                        break
                    client_socket.sendall(bytes_read)

            log_box.insert(tk.END, f"[✓] File sent: {filename} ({filesize} bytes)")

        else:
            log_box.insert(tk.END, f"[✗] Unknown command from {address}: {command}")
    except Exception as e:
        log_box.insert(tk.END, f"[✗] Error: {e}")
    finally:
        client_socket.close()

def start_server(log_box):
    server_socket = socket.socket()
    server_socket.bind((SERVER_HOST, SERVER_PORT))
    server_socket.listen(5)
    log_box.insert(tk.END, f"[*] Server started at {SERVER_HOST}:{SERVER_PORT}")
    while True:
        client_socket, address = server_socket.accept()
        thread = threading.Thread(target=handle_client, args=(client_socket, address, log_box))
        thread.daemon = True
        thread.start()


